name: Deploy to Cloudflare

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          npm install

      - name: Create deployment
        id: deployment
        run: |
          /**
           * Creates a deployment for the project.
           * Throws an error if the deployment creation fails.
           * @returns {Promise<Object>} The deployment object containing deployment data.
           */
          async function createDeployment() {
            // Input validation can be added here for specific requirements.
            const response = await someDeploymentService.create();
            if (!response || !response.data) {
              throw new Error('Failed to create deployment: No response data');
            }
            return response;
          }

          try {
            const deployment = await createDeployment();  // Add logic for deployment
            const deploymentId = deployment.data.id;  // Fetching the deployment ID
            console.log(`Deployment ID: ${deploymentId}`);
            core.setOutput('id', deploymentId);
          } catch (error) {
            console.error('Deployment Error:', error);
            core.setFailed(`Deployment failed: ${error.message}`);
          }

      - name: Deploy to Cloudflare
        run: |
          echo "Deploying with ID: ${{ steps.deployment.outputs.id }}"